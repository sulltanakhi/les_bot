from aiogram import types, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMedia, WebAppInfo
import asyncio
from random import randint


# TOKEN = "7702041998:AAGYq7SjeufGnJQ4OFAr2zrzqVP7VyD6nCM"
#
# bot = Bot(token=TOKEN)
# dp = Dispatcher()
# user_data = {}



# @dp.message()
async def handle_text_r(message: types.Message, user_data):
    user_id = message.from_user.id
    # if user_id not in user_data or message.text == "/start":
    #     await start(message)
    if "holat" not in user_data[user_id]:
        await shaxarlar(message, user_data)
    elif "shaxar" not in user_data[user_id]:
        await menu(message, user_data)
    elif message.text == "/boshmenu":
        await menu(message, user_data)
    elif message.text == "üõç –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
        await order(message, user_data)
    elif message.text == "üî• –ê–∫—Ü–∏–∏":
        await sale(message, user_data)
    elif message.text == "üôãüèª‚Äç‚ôÇÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ":
        await team(message, user_data)
    elif message.text == "‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å Les Ailes":
        await call(message, user_data)
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await menu(message, user_data)
    elif message.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤":
        await history(message, user_data)
    elif message.text == "üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏":
        await bizbilanaloqa(message, user_data)
    elif message.text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await fikr(message, user_data)
    elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await call(message, user_data)
    elif message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await sozlamalar(message, user_data)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await ism(message, user_data)
    elif message.text == "üîΩ –ù–∞–∑–∞–¥" or message.text == "‚§µÔ∏è –ù–∞–∑–∞–¥":
        await sozlamalar(message, user_data)
    elif "ismlarr" in user_data[user_id]:
        await checkname(message, user_data)
        await sozlamalar(message, user_data)
    elif message.contact is not None or "+998" in message.text:
        await ask_phone(message, user_data)
    elif "ver_code" in user_data[user_id]:
        await check_code(message, user_data)
    elif message.text == "üì± –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä":
        await history(message, user_data)
    return user_data


# @dp.message(Command("start"))
# async def start(message: types.Message):
#     user_id = message.from_user.id
#     user_data[user_id] = {}
#     button = [
#         [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), types.KeyboardButton(text="üá∫üáø –£–∑–±–µ–∫—á–∞"),
#          types.KeyboardButton(text="üá∫üá∏ English")],
#     ]
#     keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
#     await message.answer(
#         "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏ Les Ailes.\n\n"
#         "Hello! Welcome to Les Ailes delivery service.",
#         reply_markup=keyboard)
#     print(1, user_data)


async def shaxarlar(message: types.Message, user_data):
    user_id = message.from_user.id
    language = message.text
    # if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
    #     await til()
    # else:
    user_data[user_id]["holat"] = language
    button = [
        [types.KeyboardButton(text="–¢–∞—à–∫–µ–Ω—Ç"), types.KeyboardButton(text="–ê–Ω–¥–∏–∂–∞–Ω")],
        [types.KeyboardButton(text="–°–∞–º–∞—Ä–∫–∞–Ω–¥"), types.KeyboardButton(text="–§–µ—Ä–≥–∞–Ω–∞")],
        [types.KeyboardButton(text="–ë—É—Ö–∞—Ä–∞"), types.KeyboardButton(text="–ú–∞—Ä–≥–∏–ª–∞–Ω")],
        [types.KeyboardButton(text="–ù—É–∫—É—Å"), types.KeyboardButton(text="–•–æ—Ä–∞–∑–º")],
        [types.KeyboardButton(text="–ß–∏—Ä—á–∏–∫"), types.KeyboardButton(text="–ö–æ–∫–∞–Ω–¥")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ? \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    print(2, user_data)


city = [
    "–¢–∞—à–∫–µ–Ω—Ç", "–ê–Ω–¥–∏–∂–∞–Ω",
    "–°–∞–º–∞—Ä–∫–∞–Ω–¥", "–§–µ—Ä–≥–∞–Ω–∞",
    "–ë—É—Ö–∞—Ä–∞", "–ú–∞—Ä–≥–∏–ª–∞–Ω",
    "–ù—É–∫—É—Å", "–•–æ—Ä–∞–∑–º",
    "–ß–∏—Ä—á–∏–∫", "–ö–æ–∫–∞–Ω–¥"
]


async def menu(message: types.Message, user_data):
    user_id = message.from_user.id
    if message.text in city:
        boshmenu = message.text
        user_data[user_id]["shaxar"] = boshmenu
    else:
        user_data[user_id]["shaxar01"] = message.text
    button = [
        [types.KeyboardButton(text="üõç –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
        [types.KeyboardButton(text="üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")],
        [types.KeyboardButton(text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), types.KeyboardButton(text="üî• –ê–∫—Ü–∏–∏")],
        [types.KeyboardButton(text="üôãüèª‚Äç‚ôÇÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ"),
         types.KeyboardButton(text="‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å Les Ailes")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
    print(3, user_data)


async def order(message: types.Message, user_data):
    user_id = message.from_user.id
    buyurtma = message.text
    user_data[user_id]["holat"] = buyurtma
    button = [
        [types.KeyboardButton(text="üèÉ –ó–∞–±—Ä–∞—Ç—å —Å–∞–º"), types.KeyboardButton(text="üöô –î–æ—Å—Ç–∞–≤–∫–∞")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer("–ó–∞–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üôã‚Äç‚ôÇÔ∏è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É üöô", reply_markup=keyboard)
    print(3, user_data)


async def sale(message: types.Message, user_data):
    user_id = message.from_user.id
    aksiya = message.text
    user_data[user_id]["holat"] = "–∞–∫—Ü–∏—è"
    await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ü–∏–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç")
    print(4, user_data)


async def team(message: types.Message, user_data):
    user_id = message.from_user.id
    user_data[user_id]["holat"] = "team"
    buttons = [
        [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url="https://t.me/@HavoqandJamoa_Bot")],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons, resize_keyboard=True)
    await message.answer(
        "–ú—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ! \n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=keyboard)


async def call(message: types.Message, user_data):
    user_id = message.from_user.id
    user_data[user_id]["holat"] = "call"
    button = [
        [types.KeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"), types.KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –±—É–¥–µ–º —Ä–∞–¥—ã.",
                         reply_markup=keyboard)
    print(5, user_data)


async def bizbilanaloqa(message: types.Message, user_data):
    user_id = message.from_user.id
    user_data[user_id]["holat"] = "bizbilanaloqa"
    buttons = [
        [types.InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url="https://t.me/@lesaileshelpbot")],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons, resize_keyboard=True)
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.", reply_markup=keyboard)
    print(6, user_data)


async def history(message: types.Message, user_data):
    user_id = message.from_user.id
    user_data[user_id]["holat"] = "history"
    button = [
        [types.KeyboardButton(text="üìû –ú–æ–π –Ω–æ–º–µ—Ä", request_contact=True)],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n–ü—Ä–∏–º–µ—Ä: +998xx xxx xx xx", reply_markup=keyboard)


async def ask_phone(message: types.Message, user_data):
    user_id = message.from_user.id
    i = '+1234567890'
    ok = True
    if message.contact is not None:
        phone_c = message.contact.phone_number
        user_data[user_id]['phone'] = phone_c
        ver_code = randint(100000, 999999)
        user_data[user_id]['ver_code'] = ver_code
        await message.answer(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {ver_code}")
    elif len(message.text) == 13 and message.text[0:4] == '+998':
        for symbol in message.text:
            if symbol not in i:
                await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä')
                ok = False
                break
        if ok == True:
            phone = message.text
            user_data[user_id]['phone'] = phone
            ver_code = randint(100000, 999999)
            user_data[user_id]['ver_code'] = ver_code
            await message.answer(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {ver_code}")

    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä')
        print(user_data)

    print(7, user_data)


async def check_code(message: types.Message, user_data):
    user_id = message.from_user.id
    code = message.text
    ver_code = user_data[user_id]["ver_code"]
    if str(ver_code) == code:
        user_data[user_id]["status"] = "verified"
        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        await menu(message)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    del user_data[user_id]['ver_code']
    print(user_data)


async def sozlamalar(message: types.Message, user_data):
    user_id = message.from_user.id
    user_data[user_id]["holat"] = "sozlamalar"
    button = [
        [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), types.KeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä")],
        [types.KeyboardButton(text="üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"), types.KeyboardButton(text="üá∫üáø –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")],
        [types.KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö"), types.KeyboardButton(text="üìÑ –û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    print(8, user_data)


async def ism(message: types.Message, user_data):
    user_id = message.from_user.id
    user_data[user_id]['ismlarr'] = "ism"
    button = [
        [types.KeyboardButton(text="üîΩ –ù–∞–∑–∞–¥")],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.", reply_markup=keyboard)
    print(9, user_data)


async def checkname(message: types.Message, user_data):
    user_id = message.from_user.id
    checkname = message.text
    user_data[user_id]["name"] = checkname
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")
    del user_data[user_id]['ismlarr']


async def fikr(message: types.Message, user_data):
    user_id = message.from_user.id
    user_data[user_id]["holat"] = fikr
    button = [
        [types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"), types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
    ]
    buttons = [
        [types.InlineKeyboardButton(text="–ü—Ä–æ–¥—É–∫—Ç", callback_data="mahsulot")],
        [types.InlineKeyboardButton(text="1üò£", callback_data="sticker"),
         types.InlineKeyboardButton(text="2‚òπÔ∏è", callback_data="sticker"),
         types.InlineKeyboardButton(text="3üòê", callback_data="sticker"),
         types.InlineKeyboardButton(text="4üòë", callback_data="sticker"),
         types.InlineKeyboardButton(text="5üòç", callback_data="sticker"), ],
        [types.InlineKeyboardButton(text="–°–µ—Ä–≤–∏—Å", callback_data="xizmat")],
        [types.InlineKeyboardButton(text="1üëäüèª", callback_data="sticker"),
         types.InlineKeyboardButton(text="2üëéüèª", callback_data="sticker"),
         types.InlineKeyboardButton(text="3üëåüèª", callback_data="sticker"),
         types.InlineKeyboardButton(text="4ü§ôüèª", callback_data="sticker"),
         types.InlineKeyboardButton(text="5üëçüèª", callback_data="sticker"), ],
        [types.InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data="yetkazib berish")],
        [types.InlineKeyboardButton(text="1üêå", callback_data="sticker"),
         types.InlineKeyboardButton(text="2üê¢", callback_data="sticker"),
         types.InlineKeyboardButton(text="3üõ∫", callback_data="sticker"),
         types.InlineKeyboardButton(text="4üèé", callback_data="sticker"),
         types.InlineKeyboardButton(text="5üöÄ", callback_data="sticker"), ],
    ]
    keyboards = types.InlineKeyboardMarkup(inline_keyboard=buttons, resize_keyboard=True)
    keyboard = types.ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer("‚úÖ –û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ Les Ailes.", reply_markup=keyboards)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ 5-–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ.", reply_markup=keyboard)
    print(8, user_data)


# async def main():
#     print('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...')
#     # await dp.start_polling(bot)
#
#
# asyncio.run(main())
# rus tili qo'shildi
